package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import Model.Account;
import Util.ConnectionUtil;
/*A DAO is a class that mediates the transformation of data between the format of objects in Java to 
rows in a database. */
public class AccountDAO{
    /******************************************Method to check if Username Already Exists**************************** */
    public boolean usernameExists(String username) throws SQLException {
        Connection connection = ConnectionUtil.getConnection(); // retrieve database conncection 
        String checkUsernameSQL = "SELECT * FROM account WHERE username = ?"; // selects all where usernmae matches 
        PreparedStatement statement = connection.prepareStatement(checkUsernameSQL); // creating a prepar statemetn object via sql query 
        statement.setString(1, username); // setting value of the first param to the username variable 
        ResultSet resultSet = statement.executeQuery(); // The prepared statement is executed using executeQuery(), which returns a ResultSet object containing the results of the query execution.

        /*note, tried using if statetment - didn't fix  */
        return resultSet.next(); // return result set object 
    }
    /*************************************************************New User Registration *********************************************************** */
    public Account createAccount (Account account){
         /*********************** Must check 1. username doesn't already exist in the system. 2. username is not blank 3. password is > 4char ********************/
        Connection connection = ConnectionUtil.getConnection(); /*  this can be declared at the class level scope rather than 
            method level, but i am not going to change it while everything works - хотел менять, но понял что бес попутал 
            и трогать не стоит пока все работает, пошло оно*/
        try {

            // //adding validation to check if the usernmae is not blank before executing sql statement (adding user)
            if (account.getUsername().isBlank()) { //method check if string is blank 
                throw new IllegalArgumentException("You did not provide a username pendejo!");
            }
            // Checking if the password length is at least 4 characters
            if (account.getPassword().length() < 4) {
                throw new IllegalArgumentException("Password is too short! Must be over 4 characters! Because of you Pendejo, self-termination starts in 10 seconds!");
            }
            if (usernameExists(account.getUsername())) { // using the usernameExists method (below) to check for duplicate username. if it already exists, then the usernameExists method will return it 
                // and this condition will be true which will activate the exception */
                 throw new IllegalArgumentException("Username already exists!");
            }

            //sql statement for adding user 
            String createAccountSQL = "INSERT INTO account (username, password) VALUES (?, ?)";//inserting user in the database
            PreparedStatement creatingAccount = connection.prepareStatement(createAccountSQL,PreparedStatement.RETURN_GENERATED_KEYS);
            /*the line above creates prepared statement object from sql string; return generated keys will 
             * return account_id that is autogenerated, after the statement's execution. 
             */
            creatingAccount.setString(1, account.getUsername());//setting the values of the placeholders 
            creatingAccount.setString(2, account.getPassword());
            
            // Executing the SQL statement and handle the result
            int affectedrows = creatingAccount.executeUpdate();
            if (affectedrows == 0) {
            throw new SQLException("Creating account failed, no rows affected.");//exceltion if account wasn't created. 
                }
            
            // Retrieve the generated keys, if any
            ResultSet generatedKeys = creatingAccount.getGeneratedKeys();//method will return autogenerated user id
            if (generatedKeys.next()) {
                int accountId = generatedKeys.getInt(1);
                account.setAccount_id(accountId);
            } return account; // returns account object if creating of account is successful 
        } catch (SQLException e) {
            // Handle any SQL exceptions that can occur in sql
            e.printStackTrace(); // print the stacktrace of the exception 
        } 
        // finally {
        //     // Close the connection and statement in a finally block
        //     try {
        //         connection.close();//closing connection in the database 
        //     } catch (SQLException e) { // catching any slq exceptions 
        //         e.printStackTrace();
        //     }
        // }
        return null; // the method will return null if the exceptions will occur during the excecution or if there is sql error. 
    }

    /*****************************************Varifying user login credentials ************************************************** */
/*method for retrieving an account based on the provided username and password; varifying user's login */
    public Account getAccountByUsernameAndPassword(String username, String password) throws SQLException {
        Connection connection = ConnectionUtil.getConnection(); // establishing connection to the database 
        String getAccountSQL = "SELECT * FROM account WHERE username = ? AND password = ?";/*preparing the SQL stmt */
        PreparedStatement loginstmt = connection.prepareStatement(getAccountSQL);
        loginstmt.setString(1, username);
        loginstmt.setString(2, password);
        ResultSet resultSet = loginstmt.executeQuery(); // executing sql
    
        if (resultSet.next()) {// if result set contains a row then todo es bien, continuamos 
            int accountId = resultSet.getInt("account_id");
            String retrievedUsername = resultSet.getString("username");
            String retrievedPassword = resultSet.getString("password");
            return new Account(accountId, retrievedUsername, retrievedPassword);
        }
    
        return null;
    }
    
}
